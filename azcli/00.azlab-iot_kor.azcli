#!/bin/bash

# Select Azure subscription
az account list --output table

echo "\n\r"

read -p "Type Subscription Name for lab (cAsE sEnsItIvE)>>" subName

if [ ! -z "$subName" ]; then
    echo "You select " $subName " for the lab."
    az account set --subscription "$subName" --verbose
else
    echo "Please run the script again!! EXIT"
    exit
fi

chkName=$(az account list --output tsv --query "[?isDefault].name")

if [ "$subName" = "$chkName" ]; then
    echo "Subscripion Name has confirmed"
else 
    echo "Please try again with correct subscription name"
    exit
fi

echo "This script will create a resource goup in Korea South region"
echo "Type location for the lab"

# az account list-locations --output table --query []['name','displayName']
# echo "Type location for the lab"
# read -p "Location >>" loc

# # set azure region
# if [ ! -z "$loc" ]; then
#     echo "You set location" $loc " for the lab."
# else
#     echo "Default location is West US 2"
#     loc=westus2
# fi

# Set the values for the resource names that don't have to be globally unique.
# The resources that have to have unique names are named in the script below
#   with a random number concatenated to the name so you can probably just
#   run this script, and it will work with no conflicts.
num=$(shuf -i0-1000 -n1)
loc=koreasouth
loc2=eastasia

# if you have exsiting one please use the one
num=$(shuf -i0-1000 -n1)
rgName='azlab-'$num'-rg' #Save it as ps1
# set blob name that should be unique 
blobName='azlab'$num'blob' # It will be saved it in parameter file
# set container name that will be created in Blob
containerName=devicelogs
# set Cosmos Account Name
cosmosAcctName='azlab'$num'cos'
cosmosDBName='azlab'$num'iotlog'
# set SQL Server (Instance) name
sqlsvrName='azlab'$num'sql' # It will be saved it in parameter file
# DO NOT CHANGE!!!
sqldbName='azlab'$num'db'
# user id
id=azureadmin
sqladm=sqladmin
# User password 
sqlpwd=1q2w3e4r5t^Y

# Create the Resource Group
# if you have exsiting one you can skip this part
echo "1. Create Resource Group " $rgName
az group create --name $rgName --location $loc

# Storage Account
# Create the Storage Account
echo "2. Create Blob " $blobName
az storage account create --name $blobName --resource-group $rgName --sku Standard_LRS --location $loc --kind StorageV2 

# Get blob connection string 
blobConn=$(az storage account show-connection-string --name $blobName --resource-group $rgName --output tsv)
blobkey1=$(az storage account keys list -n $blobName -g $rgName --output tsv --query "[0].value" | tr -d '"')

# Create a container
az storage container create --name $containerName --connection-string $blobConn

# Create SQL Server and restore database from backup 
# Create a SQL Server
echo "Create a SQL Server " $sqlsvrName
az sql server create --admin-user $sqladm --admin-password $sqlpwd --location $loc --name $sqlsvrName --resource-group $rgName 

# Update SQL Server Firewall rule
# Opeing all firewall is NOT recommend for production or in any environment
# Opening all IP address is for this demo and lab only
echo "7. Update SQL Server Firewall"
az sql server firewall-rule create -n allowall --start-ip-address 1.1.1.1 --end-ip-addres 255.255.255.255 -g $rgName -s $sqlsvrName
az sql server firewall-rule create -g $rgName -s $sqlsvrName -n allowazure --start-ip-address 0.0.0.0 --end-ip-address 0.0.0.0

# Create a SQL DB
az sql db create --name $sqldbName --resource-group $rgName --server $sqlsvrName --service-objective S1 

# Create Sample Table
# Download query
wget -O ./azlab-sqldb-tbl.sql https://raw.githubusercontent.com/xlegend1024/az-iot-hol/master/sqldb/createtable.sql
sqlcmd -S $sqlsvrName'.database.windows.net' -d $sqldbName -U $sqladm -P $sqlpwd -i ./azlab-sqldb-tbl.sql

# Create edge Linux VM
az vm create --resource-group $rgName --name 'azlab'$num'edge' --image Canonical:UbuntuServer:16.04-LTS:latest --admin-username $id --admin-password $sqlpwd --size Standard_B1ms --no-wait

# Create developer Windows VM
vmImage="microsoft-ads:windows-data-science-vm:windows2016:latest"
az vm image accept-terms --urn microsoft-ads:windows-data-science-vm:windows2016:latest
az vm create --resource-group $rgName --name 'azlab'$num'wvm' --image $vmImage --admin-username $id --admin-password $sqlpwd --size Standard_DS3_v2 --no-wait

# See lab environment
echo "Subscription Name:" $subName
echo "Resource Group:   " $rgName
echo "Location:         " $loc
echo "Blob:             " $blobName
echo "Blob Key:         " $blobkey1
echo "Conatiner:        " $containerName
echo "ID for lab        " $id
echo "SQL Server:       " $sqlsvrName
echo "SQL Database:     " $sqladm
echo "SQL DB Password:  " $sqlpwd

echo "Create CosmosDB"
az cosmosdb create -g $rgName --name $cosmosAcctName 

# Create a database
az cosmosdb database create --resource-group $rgName --name $cosmosAcctName --db-name $cosmosDBName

# Create a SQL API container with a partition key and 1000 RU/s
az cosmosdb collection create --resource-group $rgName --collection-name rawlog --name $cosmosAcctName --db-name $cosmosDBName --partition-key-path /PartitionId --throughput 400

# See lab environment
echo "Subscription Name:" $subName
echo "Resource Group:   " $rgName
echo "Location:         " $loc
echo "Blob:             " $blobName
echo "Blob Key:         " $blobkey1
echo "Conatiner:        " $containerName
echo "ID for lab        " $id
echo "SQL Server:       " $sqlsvrName
echo "SQL Database:     " $sqladm
echo "SQL DB Password:  " $sqlpwd